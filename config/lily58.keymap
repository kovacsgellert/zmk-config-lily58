/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "balanced"; };

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp GRAVE         &kp N1       &kp N2       &kp N3        &kp N4         &kp N5                                  &kp N6         &kp N7         &kp N8        &kp N9       &kp N0          &kp MINUS
&kp TAB           &kp Q        &kp W        &kp E         &kp R          &kp T                                   &kp Y          &kp U          &kp I         &kp O        &kp P           &kp BACKSLASH
&mt LCTRL ESCAPE  &hml LALT A  &hml LGUI S  &hml LCTRL D  &hml LSHIFT F  &kp G                                   &kp H          &hmr RSHIFT J  &hmr RCTRL K  &hmr RGUI L  &hmr RALT SEMI  &kp SQT
&kp LSHFT         &kp Z        &kp X        &kp C         &kp V          &kp B   &kp PRINTSCREEN    &kp DELETE   &kp N          &kp M          &kp COMMA     &kp DOT      &kp FSLH        &kp EQUAL
                                            &kp LALT      &kp LGUI       &mo 2   &lt 1 SPACE        &lt 2 ENTER  &kp BACKSPACE  &kp LG(SPACE)  &kp RALT
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none  &none            &kp F10  &kp F11  &kp F12  &kp KP_NUMLOCK                        &trans  &trans  &trans  &kp LPAR          &kp RPAR           &none
&none  &kp STAR         &kp N7   &kp N8   &kp N9   &kp KP_PLUS                           &none   &none   &none   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp TILDE
&none  &kp KP_DIVIDE    &kp N4   &kp N5   &kp N6   &kp KP_MINUS                          &none   &none   &none   &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp GRAVE
&none  &kp KP_NUMBER_0  &kp N1   &kp N2   &kp N3   &kp KP_EQUAL    &kp KP_DOT    &trans  &none   &none   &none   &none             &none              &none
                                 &trans   &trans   &trans          &trans        &trans  &trans  &trans  &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none  &none     &kp F10       &kp F11        &kp F12         &none                     &none     &none              &none         &none       &kp LEFT_BRACKET  &kp BACKSLASH
&none  &none     &kp F7        &kp F8         &kp F9          &none                     &none     &kp RIGHT_BRACKET  &kp GRAVE     &kp EQUAL   &none             &none
&none  &kp LALT  &hml LGUI F4  &hml LCTRL F5  &hml LSHIFT F6  &none                     &kp LEFT  &kp DOWN           &kp UP_ARROW  &kp RIGHT   &none             &none
&none  &none     &kp F1        &kp F2         &kp F3          &none   &none     &none   &none     &kp C_VOL_DN       &kp C_VOL_UP  &kp C_MUTE  &none             &none
                               &trans         &trans          &trans  &trans    &trans  &trans    &trans             &trans
            >;
        };

        meta_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans     &kp LS(N9)        &kp LS(N0)         &trans
&kp F1      &kp F2            &kp F3             &kp F4             &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp F12
&kp GRAVE   &kp EXCL          &kp AT             &kp HASH           &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp ASTRK  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp TILDE
&trans      &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans        &trans        &trans    &trans  &trans     &kp MINUS  &none      &kp LBRC          &none              &kp PIPE
                                                 &trans             &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate_meta_layer_condition {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
